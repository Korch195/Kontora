Blackbox ai:
https://www.blackbox.ai/share/01b2dedc-e28a-4b8c-918c-3431cadaea7c
ChatGPT:
https://chat.openai.com/share/602e0926-c61b-4a82-8ba7-25a957f5b8be

Для перевірки здатності ШІ до оптимізації коду мною було обране завдання
Лабораторної роботи №10 минулого семестру, а саме create table & flatten.
Суть завдання полягала у використанні рекурсії, тож дослідити як 
ШІ зможе покращити такий код є досить цікавою задачею.

1. При закиданні одразу двох функцій ШІ міг забувати оптимізувати
обидві, проте це відбувалося не завжди. Складність цього завдання 
не була високою, проте що Chat GPT, що BlackBox допускалися однієї
і тієї ж помилки - відсутність edge кейсів. У даному випадку у BlackBox
вийшло дещо краще, адже для ChatGPT потрібно було ще виправили непотрібний
if-statement, тож можна навіть сказати, що перший краще виконав саме
частину створення робочого коду.

2. Промти мали значення для результату:
    - Варто зазначити що потрібно оптимізувати використання пам'яті 
    чи зменшення часу виконання, адже не завжди тоді бажані результати.
    - Обов'язково потрібно добавляти тесткейси для обох ШІ, бо без них
    результат дуже далекий від правильного.

3. ШІ досить непогано справляється з задачею усунення неефективних
структур. У обох випадках є покращення по спожитій пам'яті, а також 
значне покращення у часі виконання. Обидві версії змогли виконати великі 
за обсягом tables, на відміну від оригінального коду. для значень (10, 20)
ChatGPT виявився дещо ефективнішим по пам'яті, на значеннях (1000, 1000)
показали однаковий результат:
(4480, 159189524)
0.5057520866394043

4. Щодо оформлення коду, обидва можуть зробити його якомога стислішим або
більш читабельним. Хоча теж виникають проблеми з працездатністю коду, потрібні
правки та добавлення деяких умов якщо говорити конкретно за ці задачі.
Приклад скорочення коду: (файл shortened_version.py)
https://chat.openai.com/share/f44dfad1-b6c8-456a-9fe5-929c69df96d2
хоча ефективність є низькою цього коду, на рівні з оригінальним.