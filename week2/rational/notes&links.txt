link to the conversation with ChatGpt:
https://chat.openai.com/share/dcfde086-8593-4142-be29-db8ea06bb3ca
link to the conversation with  blackbox.ai:
https://www.blackbox.ai/share/2e250295-6dc0-4b05-9216-eeb32a810850
link to the task:
https://cms.ucu.edu.ua/mod/vpl/view.php?id=344953


Для цього завдання я обрала задачу на програмування № 1 (Rational) у ООП, у якій потрібно було реалізувати клас Rational. Загалом задача не є дуже складною, але однією з найлегших її теж назвати не можна.

1. Наскільки справляється ШІ в залежності від обʼєму коду та складності ідеї? (пограйтеся з різною кількістю рядків коду та з різним рівнем складності конструкції).

При роботі з малими обсягами коду та простими конструкціями ШІ  ефективно вирішує завдання. 
Але, при збільшенні обсягу та складності коду, а також при наявності складних конструкцій, ШІ може зіткнутися з труднощами та допускати помилки або взагалі не змінювати код. 
Наприклад, з оптимізацією задачі Rational, СhatGpt впорався на багато краще, ніж blackbox.ai, особливо якщо вказувати, на те що потрібно виправити, ChatGpt виконує дуже добре свою роботу. 
Поки blackbox.ai, з помилками та з новими(зайвими) функціями пробує оптимізувати код. На жаль, з оптимізуванням задачі Rational, blackbox.ai зовсім не справився.

2. Наскільки впливає сам промпт - формулювання завдання (як потрібно оптимізовувати, згідно якого стилю покращувати тощо)? Як можна покращити промпти, щоб система ШІ краще справлялася?

Промпт  значно впливає на успішність роботи ШІ. Чітке та зрозуміле формулювання завдання допомагає системі краще зрозуміти, що саме потрібно зробити. Якщо промпт містить точні вказівки(наприклад, яку функцію, або цикл поправити) щодо оптимізації, то ШІ може більш ефективно вирішувати завдання.

3. Наскільки ШІ може допомогти у виявленні та усуненні вузьких місць у коді (наприклад, неефективні цикли, надмірне використання пам'яті)?
ШІ може допомогти у виявленні та усуненні вузьких місць у коді шляхом аналізу структури програми, виявлення неефективних циклів або надмірного використання пам'яті. 
Наприклад, ChatGpt, дуже добре впорався з оптимізацією функції mixed_form, тобто він вилучив додаткові перевірки на довжину рядка, оскільки ці перевірки не потрібні при використанні функції split(), також він використав функцію map() для одночасного перетворення рядка у списку чисел.


4. Наскільки ШІ може допомогти з оформленням коду?
ШІ може допомогти з оформленням коду, наприклад, він може надавати рекомендації щодо стилю коду, також він додає коментарі, та пише документацію. 
Загалом він може допомогти з лаконічним оформленням коду, тільки за формулюванням цього прохання.

Висновок
ChatGPT успішно справився зі своїм завданням, оптимізуючи код та роблячи його більш лаконічним. Після оптимізації код продовжує успішно проходити всі тести, що підтверджує його правильність та працездатність.
Це дозволило покращити читабельність та ефективність коду, зменшити його об'єм та зробити його більш зрозумілим для розробників.
З іншого боку, blackbox не впорався з оптимізацією коду. Його реалізація показала значно гірші показники в порівнянні з оптимізованою версією коду, яка була створена ChatGPT. Результати blackbox пройшли лише 22% тестів. 
Більше того, в порівнянні з оновленою версією, код, створений blackbox, працює повільніше та менш ефективно.

